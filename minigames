<!DOCTYPE html>
<html data-theme="dark">
<head>
<title>star cave | minigame creator | minigames</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Quicksand">
<link rel="icon" href="https://www.serebii.net/itemdex/sprites/starsweet.png" type="image/x-icon">
<script>
document.addEventListener('DOMContentLoaded', () => {
    const copyableItems = document.querySelectorAll('.copyable-item');
    const copyFeedbackPopup = document.getElementById('copy-feedback-popup');

    copyableItems.forEach(item => {
        item.addEventListener('click', async () => {
            const textToCopy = item.getAttribute('data-copy-text');

            try {
                await navigator.clipboard.writeText(textToCopy);
                showPopup();
            } catch (err) {
                console.error('Failed to copy text: ', err);                
            }
        });
    });

    function showPopup() {
        copyFeedbackPopup.classList.add('show');
        setTimeout(() => {
            copyFeedbackPopup.classList.remove('show');
        }, 2000); // Popup disappears after 2 seconds
    }
});

function calculateSettingAsThemeString({ localStorageTheme, systemSettingDark }) {
  if (localStorageTheme !== null) {
    return localStorageTheme;
  }

  if (systemSettingDark.matches) {
    return "dark";
  }

  return "light";
}

function updateButton({ buttonEl, isDark }) {
  const newCta = isDark ? "Light" : "Dark";
buttonEl.setAttribute("aria-label", newCta);
  buttonEl.innerText = newCta;
}

function updateThemeOnHtmlEl({ theme }) {
  document.querySelector("html").setAttribute("data-theme", theme);
}

const button = document.querySelector("[data-theme-toggle]");
const localStorageTheme = localStorage.getItem("theme");
const systemSettingDark = window.matchMedia("(prefers-color-scheme: dark)");

let currentThemeSetting = calculateSettingAsThemeString({ localStorageTheme, systemSettingDark });

updateButton({ buttonEl: button, isDark: currentThemeSetting === "dark" });
updateThemeOnHtmlEl({ theme: currentThemeSetting });

button.addEventListener("click", (event) => {
  const newTheme = currentThemeSetting === "dark" ? "light" : "dark";

  localStorage.setItem("theme", newTheme);
  updateButton({ buttonEl: button, isDark: newTheme === "dark" });
  updateThemeOnHtmlEl({ theme: newTheme });

  currentThemeSetting = newTheme;
});

</script>
<style>
td {
  vertical-align: top;
}
.copyable-item {
    cursor: pointer;
    margin: -5px 5px 15px 5px;
    padding: 5px 10px 5px 10px;
    font-family: "Consolas", "Liberation Mono", "Courier New", monospace;
    border: 1px solid green;
    border-radius: 5px;
    display: inline-block;
}

.copyable-item:hover {    
    border: 1px solid var(--color-fg);
}

.popup {
    position: fixed;
    bottom: 50%;
    left: 50%;
    transform: translateX(-50%);
    background-color: #333;
    color: #fff;
    padding: 10px 20px;
    border-radius: 5px;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
    z-index: 1000;
}

.popup.show {
    opacity: 1;
    visibility: visible;
}

code {
  color: silver;
}
textarea {
  padding: 25px;
  border-radius: 5px;
  border: 1px solid green;
  width: 95%;
  field-sizing: content;
  min-height: 4rem; /* Example: set a minimum height */
  background-color: var(--color-bg);
  color: var(--color-fg);
  transition: background-color var(--transition-speed) ease, color var(--transition-speed) ease;
}
div {
  overflow: scroll;
}
body {
  font-family: "Quicksand", sans-serif;
  padding: 30px;
  background-color: var(--color-bg);
  color: var(--color-fg);
  transition: background-color var(--transition-speed) ease, color var(--transition-speed) ease;
}
[data-theme="light"] {
   --color-bg: #ffffff;
   --color-fg: #000000;
   --transition-speed: 0.5s;
}
[data-theme="dark"] {
   --color-bg: #000000;
   --color-fg: #ffffff;
   --transition-speed: 0.5s;
}
button {
  font-family: "Quicksand", sans-serif;
  border: 1px solid var(--color-fg);
  border-radius: 5px;
  padding: 0.5rem 1rem;
  transition: all var(--global-transition-time) ease-in-out;
  color: var(--color-fg);
  background-color: var(--color-bg);
  transition: background-color var(--transition-speed) ease, color var(--transition-speed) ease;
  margin-bottom: 24px;
}

</style>
</head>
<body>
<center>
<h1><table><tr><td><a style="text-decoration:none; color: #8ebccd" href="https://rentry.co/star-cave">star cave</a> ðŸ’« <span style="color: #8ebccd">minigame creator</span></td></tr></table></h1>
<h3><span style="letter-spacing:5px;"><table><tr>
<td>MINIGAMES</td>
<td style="width: 50px"></td><td><a style="text-decoration:none; color: silver" href="https://htmlpreview.github.io/?https://github.com/bouquets-ps/gc-creator/blob/main/faq">FAQ</a></td>
</tr></table></span></h3>
</center>

<hr><br>
<center>

<button
    type="button"
    data-theme-toggle
    aria-label="Light"
  >Light</button>

<br><br>

<h3>If you are unfamiliar with a minigame, you may replace <code>!htmlbox</code> with <code>/htmlbox</code> to view its prompt privately on PS!.</h3><br>

</center>

<div id = "container">

<div id="copy-feedback-popup" class="popup"><center><span style="display: inline-block;height: 30px;width: 40px;image-rendering: pixelated;background:transparent url(https://play.pokemonshowdown.com/sprites/pokemonicons-sheet.png?v16) no-repeat scroll -0px -750px"></span><br>Skitty used Copycat!</center></div>

<!-- Other minigame sections remain unchanged -->

<!-- UPDATED TOGETIC'S TRAINER CARDS SECTION -->
<div class="searchValue" style="display: inline-block ; border: 1px solid #68a ; border-radius: 5px ; padding: 25px ; width: 95%"><details><summary><span style="display: inline-block;height: 30px;width: 40px;image-rendering: pixelated;background:transparent url(https://play.pokemonshowdown.com/sprites/pokemonicons-sheet.png?v16) no-repeat scroll -320px -420px"></span><strong class="searchValue">Togetic's Trainer Cards</strong><br><br>Guess an offline Game Corner user based on their <a style="text-decoration:none; color: silver" href="https://tinyurl.com/gc-museum">trainer card</a>!<br><br><span style="float: right"><b>Last updated:</b> 2025-10-17</span><br></summary><p>

<div style="display: inline-block ; border: 1px solid #68a ; border-radius: 5px ; padding: 25px ; width: 95%"><b>Prompt</b><br><br>

<textarea>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Mini Togetic's Trainer Cards</title>
<style>
  body {font-family: system-ui, Arial, sans-serif; background:#f5f6fa; color:#222; padding:2em; text-align:center;}
  #search-section {margin-bottom:1.2em;}
  input, button {padding:0.5em 0.8em; border-radius:6px; border:1px solid #ccc; font-size:1em;}
  button {background:#8e17de; color:#fff; cursor:pointer; border:none;}
  button:hover {background:#7310b9;}
  #card-container {margin:2em auto; min-height:60px;}
  #copy-box {margin-top:2em;}
  textarea {width:90%; max-width:600px; height:180px; border-radius:8px; padding:8px; font-family:monospace;}
  .infobox {box-shadow:0 4px 10px rgba(0,0,0,0.08); border-radius:12px; overflow:hidden; display:inline-block;}
</style>
</head>
<body>
<h2>Mini Togetic's Trainer Cards Generator</h2>
<div id="search-section">
  <input id="username-input" type="text" placeholder="Enter username">
  <button id="search-btn">Search</button>
</div>
<div id="card-container">Enter a username and click Search.</div>
<div id="copy-box" style="display:none;">
  <h3>Copy and send:</h3>
  <textarea id="html-output" readonly></textarea><br>
  <button id="copy-btn">Copy HTML</button>
</div>
<script>
const RAW_URL = "https://raw.githubusercontent.com/bouquets-ps/gc-museum/refs/heads/main/trainer-card";
const PREFIX = `!htmlbox <span style="display: inline-block;height: 30px;width: 40px;image-rendering: pixelated;background:transparent url(https://play.pokemonshowdown.com/sprites/pokemonicons-sheet.png?v16) no-repeat scroll -320px -420px;"></span><b>Mini Togetic's Trainer Cards</b><br>Guess an offline Game Corner user based on their <a href="https://tinyurl.com/gc-museum">trainer card</a>!<hr><center>`;
const SUFFIX = `</center>`;
function cleanUsername(str) { return str.toLowerCase().replace(/[^a-z0-9]/g, ''); }
function escapeRegExp(s) { return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); }
function removeLastUpdated(html) { return html.replace(/<b>\s*Last\s+updated:\s*<\/b>.*?<br\s*\/?>/i, ""); }
function removeUsernameStrong(html, username) { const re = new RegExp('(<strong[^>]*class=["\']searchValue["\'][^>]*>)\\s*' + escapeRegExp(username) + '\\s*(</strong>)', 'i'); return html.replace(re, '$1$2'); }
function removeQuotesFromDimensions(html) { return html.replace(/(width|height)=["']([^"']+)["']/gi, '$1=$2'); }
async function loadTrainerCard(usernameInput) {
  const container = document.getElementById("card-container");
  const copyBox = document.getElementById("copy-box");
  const outputArea = document.getElementById("html-output");
  container.innerHTML = "Loadingâ€¦";
  copyBox.style.display = "none";
  if (!usernameInput) { container.textContent = "Please enter a username."; return; }
  const cleanInput = cleanUsername(usernameInput);
  try {
    const res = await fetch(RAW_URL);
    const html = await res.text();
    const parts = html.split(/(?=<span\s+class=["']infobox["'])/i);
    let foundCard = null, matchedName = null;
    for (const part of parts) {
      const match = part.match(/<strong[^>]*class=["']searchValue["'][^>]*>(.*?)<\/strong>/i);
      if (match) { const nameText = match[1].trim(); if (cleanUsername(nameText) === cleanInput) { foundCard = part; matchedName = nameText; break; } }
    }
    if (!foundCard) { container.textContent = `No trainer card found for "${usernameInput}".`; return; }
    let fixed = foundCard.replace(/src=["']\/\//gi, 'src="https://').replace(/url\(["']\/\//gi, 'url("https://');
    fixed = removeLastUpdated(fixed);
    fixed = removeUsernameStrong(fixed, matchedName);
    fixed = removeQuotesFromDimensions(fixed);
    container.innerHTML = fixed;
    const fullHtml = PREFIX + fixed.trim() + SUFFIX;
    outputArea.value = fullHtml;
    copyBox.style.display = "block";
  } catch (err) { container.textContent = "Error: " + err.message; }
}
document.getElementById("search-btn").addEventListener("click", () => { const username = document.getElementById("username-input").value.trim(); if (!username) return; loadTrainerCard(username); });
document.getElementById("username-input").addEventListener("keydown", e => { if (e.key === "Enter") { e.preventDefault(); document.getElementById("search-btn").click(); } });
document.getElementById("copy-btn").addEventListener("click", () => { const textarea = document.getElementById("html-output"); textarea.select(); document.execCommand("copy"); alert("HTML copied to clipboard!"); });
</script>
</textarea>

</div><br><br>
<div style="display: inline-block ; border: 1px solid #68a ; border-radius: 5px ; padding: 25px ; width: 95%"><b>Click to Copy</b><br><br>

<table>
<tr><td style="width: 250px">Link</td><td><span class="copyable-item" data-copy-text="https://raw.githubusercontent.com/bouquets-ps/gc-museum/refs/heads/main/trainer-card">User Museum's Raw Content</span></td></tr>
</table>

</div>
</p></details></div><br><br>

<!-- Other minigames continue below... -->

</div>
</body>
</html>
